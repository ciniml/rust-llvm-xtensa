//===-- XtensaSubtarget.h - Define Subtarget for the Xtensa ----*- C++ -*--===//
//
//                     The LLVM Compiler Infrastructure
//
// This file is distributed under the University of Illinois Open Source
// License. See LICENSE.TXT for details.
//
//===----------------------------------------------------------------------===//
//
// This file declares the Xtensa specific subclass of TargetSubtargetInfo.
//
//===----------------------------------------------------------------------===//

#ifndef LLVM_LIB_TARGET_XTENSA_XTENSASUBTARGET_H
#define LLVM_LIB_TARGET_XTENSA_XTENSASUBTARGET_H

#include "XtensaFrameLowering.h"
#include "XtensaISelLowering.h"
#include "XtensaInstrInfo.h"
#include "XtensaRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGTargetInfo.h"
#include "llvm/CodeGen/TargetSubtargetInfo.h"
#include "llvm/IR/DataLayout.h"
#include "llvm/Target/TargetMachine.h"
#include <string>

#define GET_SUBTARGETINFO_HEADER
#include "XtensaGenSubtargetInfo.inc"

namespace llvm {
class GlobalValue;
class StringRef;

class XtensaSubtarget : public XtensaGenSubtargetInfo {
protected:
  enum XtensaArchEnum { ESP8266, ESP32 };

  XtensaArchEnum XtensaArchVersion;

private:
  Triple TargetTriple;
  XtensaInstrInfo InstrInfo;
  XtensaTargetLowering TLInfo;
  SelectionDAGTargetInfo TSInfo;
  XtensaFrameLowering FrameLowering;
  bool UseSmallSection;
  bool UseSoftFloat;

  // Enabled Xtensa Density extension
  bool HasDensity = true;

  // Enabled Xtensa Single FP instructions
  bool HasSingleFloat = true;

  // Enabled Xtensa Loop extension
  bool HasLoop = true;

  // Enabled Xtensa MAC16 instructions
  bool HasMAC16 = true;

  // Enabled Xtensa Window extension
  bool HasWindow = true;

  // Enabled Xtensa Boolean extension
  bool HasBoolean = true;

  // Enable Xtensa Sign Extend option
  bool HasSEXT = true;

  // Enable Xtensa NSA option
  bool HasNSA = true;

  // Enable Xtensa Mul32 option
  bool HasMul32 = true;

  // Enable Xtensa Mul32High option
  bool HasMul32High = true;

  // Enable Xtensa Div32 option
  bool HasDiv32 = true;

  // Enable Xtensa S32C1I option
  bool HasS32C1I = true;

  // Enable Xtensa THREADPTR option
  bool HasTHREADPTR = true;

  XtensaSubtarget &initializeSubtargetDependencies(StringRef CPU, StringRef FS);

public:
  XtensaSubtarget(const Triple &TT, const std::string &CPU,
                  const std::string &FS, const TargetMachine &TM);

  const TargetFrameLowering *getFrameLowering() const { return &FrameLowering; }
  const XtensaInstrInfo *getInstrInfo() const { return &InstrInfo; }
  const XtensaRegisterInfo *getRegisterInfo() const {
    return &InstrInfo.getRegisterInfo();
  }
  const XtensaTargetLowering *getTargetLowering() const { return &TLInfo; }
  const SelectionDAGTargetInfo *getSelectionDAGInfo() const { return &TSInfo; }

  bool isESP8266() const { return XtensaArchVersion == ESP8266; };
  bool isESP32() const { return XtensaArchVersion == ESP32; };

  bool isWinABI() const { return true /* isESP32(); */; };

  bool hasDensity() const { return HasDensity; };

  bool hasSingleFloat() const { return HasSingleFloat; };

  bool hasWindow() const { return HasWindow; }; 

  bool hasLoop() const { return HasLoop; }; 

  bool hasMAC16() const { return HasMAC16; }; 

  bool hasBoolean() const { return HasBoolean; }; 

  bool hasSEXT() const { return HasSEXT; }; 

  bool hasNSA() const { return HasNSA; }; 

  bool hasMul32() const { return HasMul32; }; 

  bool hasMul32High() const { return HasMul32High; }; 

  bool hasDiv32() const { return HasDiv32; }; 

  bool hasS32C1I() const { return HasS32C1I; }; 
  
  bool hasTHREADPTR() const { return HasTHREADPTR; }; 

  bool useSoftFloat() const { return UseSoftFloat; }

  // Automatically generated by tblgen.
  void ParseSubtargetFeatures(StringRef CPU, StringRef FS);

  bool isTargetELF() const { return TargetTriple.isOSBinFormatELF(); }

  bool useSmallSection() const { return UseSmallSection; }
};
} // end namespace llvm

#endif /* LLVM_LIB_TARGET_XTENSA_XTENSASUBTARGET_H */
